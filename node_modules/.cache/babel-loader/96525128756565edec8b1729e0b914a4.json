{"ast":null,"code":"var _jsxFileName = \"/Users/youngjikim/workspace-directory/react_project-directory/nomflix-react-projext/src/Routes/TV/TVPresenter.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Section from \"../../Components/Section\";\nimport Loader from \"../../Components/Loader\";\nconst Container = styled.div`\n  padding:0px 20px\n\n  `;\n\nconst TVPresenter = ({\n  topRated,\n  popular,\n  airingToday,\n  error,\n  loading\n}) => loading ? React.createElement(Loader, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}) : React.createElement(Container, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, topRated && topRated.length > 0 && React.createElement(Section, {\n  title: \"Top Rated Shows\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, topRated.map(show => React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, show.name))), popular && popular.length > 0 && React.createElement(Section, {\n  title: \"Popular Shows\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, popular.map(show => React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, show.name))), airingToday && airingToday.length > 0 && React.createElement(Section, {\n  title: \"Airing Today\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, airingToday.map(show => React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, show.name))));\n\nTVPresenter.propTypes = {\n  topRated: PropTypes.array,\n  popular: PropTypes.array,\n  airingToday: PropTypes.array,\n  error: PropTypes.string,\n  loading: PropTypes.bool.isRequired\n};\nexport default TVPresenter;","map":{"version":3,"sources":["/Users/youngjikim/workspace-directory/react_project-directory/nomflix-react-projext/src/Routes/TV/TVPresenter.js"],"names":["React","PropTypes","styled","Section","Loader","Container","div","TVPresenter","topRated","popular","airingToday","error","loading","length","map","show","name","propTypes","array","string","bool","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI;;;GAA7B;;AAKA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA,WAApB;AAAiCC,EAAAA,KAAjC;AAAwCC,EAAAA;AAAxC,CAAD,KAAsDA,OAAO,GAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAH,GAC/E,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGJ,QAAQ,IAAIA,QAAQ,CAACK,MAAT,GAAkB,CAA9B,IACD,oBAAC,OAAD;AAAS,EAAA,KAAK,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGL,QAAQ,CAACM,GAAT,CAAaC,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAOA,IAAI,CAACC,IAAZ,CAArB,CADH,CAFF,EAMGP,OAAO,IAAIA,OAAO,CAACI,MAAR,GAAiB,CAA5B,IACD,oBAAC,OAAD;AAAS,EAAA,KAAK,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGJ,OAAO,CAACK,GAAR,CAAYC,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAOA,IAAI,CAACC,IAAZ,CAApB,CADH,CAPF,EAWGN,WAAW,IAAIA,WAAW,CAACG,MAAZ,GAAqB,CAApC,IACD,oBAAC,OAAD;AAAS,EAAA,KAAK,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGH,WAAW,CAACI,GAAZ,CAAgBC,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAOA,IAAI,CAACC,IAAZ,CAAxB,CADH,CAZF,CADF;;AAmBAT,WAAW,CAACU,SAAZ,GAAwB;AACtBT,EAAAA,QAAQ,EAAEP,SAAS,CAACiB,KADE;AAEtBT,EAAAA,OAAO,EAAER,SAAS,CAACiB,KAFG;AAGtBR,EAAAA,WAAW,EAAET,SAAS,CAACiB,KAHD;AAItBP,EAAAA,KAAK,EAAEV,SAAS,CAACkB,MAJK;AAKtBP,EAAAA,OAAO,EAAEX,SAAS,CAACmB,IAAV,CAAeC;AALF,CAAxB;AAQA,eAAed,WAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport Section from \"../../Components/Section\";\nimport Loader from \"../../Components/Loader\";\n\nconst Container = styled.div`\n  padding:0px 20px\n\n  `;\n\nconst TVPresenter = ({topRated, popular, airingToday, error, loading}) => loading ? <Loader/> :\n  <Container>\n    {topRated && topRated.length > 0 &&\n    <Section title=\"Top Rated Shows\">\n      {topRated.map(show => <span>{show.name}</span>)}\n    </Section>}\n\n    {popular && popular.length > 0 &&\n    <Section title=\"Popular Shows\">\n      {popular.map(show => <span>{show.name}</span>)}\n    </Section>}\n\n    {airingToday && airingToday.length > 0 &&\n    <Section title=\"Airing Today\">\n      {airingToday.map(show => <span>{show.name}</span>)}\n    </Section>}\n\n  </Container>;\n\nTVPresenter.propTypes = {\n  topRated: PropTypes.array,\n  popular: PropTypes.array,\n  airingToday: PropTypes.array,\n  error: PropTypes.string,\n  loading: PropTypes.bool.isRequired\n};\n\nexport default TVPresenter;"]},"metadata":{},"sourceType":"module"}